<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="15.1">
  <zoom_level>15</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>300</x>
      <y>1470</y>
      <w>1545</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>score::memory::shared::SharedMemoryResource
--
- Create(StringLiteral, InitializeCallback, std::size_t, UserPermissions permissions = {}) noexcept: std::shared_ptr&lt;ManagedMemoryResource&gt;
--
Notes:
Calls MemoryResourceRegistry::insert_resource() in Create() after mapping the shared memory into the process.
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1950</x>
      <y>735</y>
      <w>840</w>
      <h>420</h>
    </coordinates>
    <panel_attributes>template=T: class
/score::memory::shared::PolymorphicOffsetPtrAllocator/
--
Notes:
Unchanged
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2790</x>
      <y>1230</y>
      <w>765</w>
      <h>360</h>
    </coordinates>
    <panel_attributes>template=PointedType
score::memory::shared::OffsetPtr
--
+ get() const: PointedType*
+ get(size_t) const: PointedType*
+ get&lt;ExplicitPointedType&gt;(): ExplicitPointedType*
+ GetWithoutBoundsCheck(): PointedType*
--
Notes:
If EnableOffsetPtrBoundsChecking() has not been called
with enable=false, when get() is called, gets the memory 
bounds of the region in which the offset pointer is allocated 
with MemoryResourceRegistry::get_bounds_for(this). If non-null 
bounds are returned, terminates if pointed-to-object is not 
inside memory bounds. Otherwise, returns as normal.
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1170</x>
      <y>1365</y>
      <w>45</w>
      <h>135</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1905</x>
      <y>1470</y>
      <w>615</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>score::memory::shared::HeapMemoryResource
--
Notes:
Since we don't want to bounds check, don't
call MemoryResourceRegistry::insert_memory_range().
    </panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1965</x>
      <y>360</y>
      <w>645</w>
      <h>165</h>
    </coordinates>
    <panel_attributes>score::memory::shared::MemoryResourceProxy
--
Notes:
Unchanged
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>765</x>
      <y>585</y>
      <w>870</w>
      <h>435</h>
    </coordinates>
    <panel_attributes>score::memory::shared::MemoryResourceRegistry
--
known_regions: MemoryRegionMap
--
using MemoryBounds = pair&lt;uintptr_t, uintptr_t&gt;
+ insert_resource(std::pair&lt;std::unit64_t, ManagedMemoryResource*&gt;): void
+ remove_resource(std::uint64_t identifier): void
+ GetBoundsFromAddress(uintptr_t): optional&lt;pair&lt;MemoryBounds, MemoryResourceIdentifier&gt;&gt;
+ GetBoundsFromIdentifier(uint64 identifier): Result&lt;MemoryBounds&gt;
--
Notes:
* known_regions is a map for memory regions (i.e. storing the start and end 
addresses for each memory region) which provides lock-free access to one 
writer and multiple concurrent readers.
* GetBoundsFromAddress() checks if the passed pointer is within a known
memory region. If so, returns the bounds of that memory region. Else,
returns pair of null ptrs. We return memory bounds rather than a bool
value indicating whether the OffsetPtr is within the memory bounds to
avoid explicitly coupling it with an OffsetPtr.
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1620</x>
      <y>420</y>
      <w>375</w>
      <h>405</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
lookup dispatch
target</panel_attributes>
    <additional_attributes>10.0;250.0;90.0;250.0;90.0;10.0;230.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2355</x>
      <y>510</y>
      <w>225</w>
      <h>270</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
allocates memory
using</panel_attributes>
    <additional_attributes>10.0;160.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1695</x>
      <y>510</y>
      <w>390</w>
      <h>720</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
dispatch
allocate
deallocate</panel_attributes>
    <additional_attributes>10.0;460.0;80.0;460.0;80.0;100.0;240.0;100.0;240.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1035</x>
      <y>1005</y>
      <w>90</w>
      <h>135</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
holds</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>705</x>
      <y>1110</y>
      <w>1005</w>
      <h>270</h>
    </coordinates>
    <panel_attributes>score::memory::shared::ManagedMemoryResource
--
Notes:
Unchanged
    </panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2325</x>
      <y>1140</y>
      <w>495</w>
      <h>225</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
constructs and
returns</panel_attributes>
    <additional_attributes>310.0;120.0;10.0;120.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1170</x>
      <y>1410</y>
      <w>1020</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;660.0;10.0;660.0;40.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1620</x>
      <y>885</y>
      <w>1200</w>
      <h>525</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
m2=get memory bounds</panel_attributes>
    <additional_attributes>10.0;10.0;110.0;10.0;110.0;320.0;780.0;320.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>2895</x>
      <y>825</y>
      <w>495</w>
      <h>225</h>
    </coordinates>
    <panel_attributes>
--
Global Functions
--
EnableOffsetPtrBoundsChecking():
- Sets or clears flag which to allow bounds checking.

bg=white
</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
