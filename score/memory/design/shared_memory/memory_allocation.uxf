<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="15.0.0">
  <zoom_level>7</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>119</x>
      <y>798</y>
      <w>378</w>
      <h>224</h>
    </coordinates>
    <panel_attributes>score::memory::shared::SharedMemoryResource
--
fd: int
base: void*
--
# SharedMemoryResource(StringLiteral, ...)
+ getMemoryResourceProxy(): MemoryResourceProxy*
+ getBaseAddress(): void*
+ getUsableBaseAddress(): void*
+ getEndAddress(): void*
+ getPath(): std::string*

- do_allocate(std::size_t bytes, std::size_t alignment): void*
- do_deallocate(void* p, std::size_t bytes, std::size_t alignment): void
- do_is_equal(const offset_memory_resource&amp; other) const noexcept: bool
--
Notes:
Not copyable or movable and not public constructable
only Factory can create

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>700</x>
      <y>511</y>
      <w>392</w>
      <h>196</h>
    </coordinates>
    <panel_attributes>template=T: class
/score::memory::shared::PolymorphicOffsetPtrAllocator/
--
- proxy: offset_ptr&lt;MemoryResourceProxy&gt;
--
+ PolymorphicOffsetPtrAllocator(MemoryResourceProxy* proxy)
+ PolymorphicOffsetPtrAllocator()
+ allocate( std::size_t n ): offset_ptr&lt;T&gt;
+ deallocate(offset_ptr&lt;T&gt; p, std::size_t n ): void
+ getMemoryResourceProxy(): offset_ptr&lt;MemoryResourceProxy&gt;
--
Notes:
This data type shall apply requirements
stated by
https://en.cppreference.com/w/cpp/memory/allocator_traits
If default constructed, it will not use any indirection via a 
MemoryResourceProxy to the MemoryResourceRegistry. Instead, it will 
simply allocate memory on the heap.
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1092</x>
      <y>714</y>
      <w>574</w>
      <h>133</h>
    </coordinates>
    <panel_attributes>template=PointedType
score::memory::shared::OffsetPtr
--
- offset: std::ptrdiff_t
--
+ offset_ptr() noexcept;
+ offset_ptr(pointer) noexcept;
--
Notes:
In addition to the specified members,
this data type shall apply requirements stated by
https://en.cppreference.com/w/cpp/memory/pointer_traits</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>119</x>
      <y>1057</y>
      <w>882</w>
      <h>147</h>
    </coordinates>
    <panel_attributes>score::memory::shared::SharedMemoryFactory
--
# alreadyOpenFiles
--
+ static getInstance()

+ static Open(...) noexcept: std::shared_ptr&lt;ManagedMemoryResource&gt;
+ static Create(...) noexcept: std::shared_ptr&lt;ManagedMemoryResource&gt;
+ static CreateAnonymous(...) noexcept: std::shared_ptr&lt;ManagedMemoryResource&gt;
+ static CreateOrOpen(...) noexcept: std::shared_ptr&lt;ManagedMemoryResource&gt;
+ static Remove(std::string path): void
--
Notes: 
SharedMemoryFactory is not movable or copyable.
Factory Singleton, ensures that SharedMemoryResource is created only once</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>119</x>
      <y>280</y>
      <w>469</w>
      <h>189</h>
    </coordinates>
    <panel_attributes>score::cpp::pmr::memory_resource
--
--
memory_resource()
memory_resource(const memory_resource&amp;)
/~memory_resource()/

+ allocate(std::size_t bytes, std::size_t alignment = alignof(std::max_align_t)): void*
+ deallocate(void* p, std::size_t bytes, std::size_t alignment = alignof(std::max_align_t)): void
+ is_equal(const offset_memory_resource&amp; other) const noexcept: bool

/- do_allocate(std::size_t bytes, std::size_t alignment): void*/
/- do_deallocate(void* p, std::size_t bytes, std::size_t alignment): void/
/- do_is_equal(const offset_memory_resource&amp; other) const noexcept: bool/
--
Notes:
This data type shall apply requirements stated by
https://en.cppreference.com/w/cpp/memory/memory_resource

         </panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>336</x>
      <y>763</y>
      <w>21</w>
      <h>49</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;50.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>280</x>
      <y>1015</y>
      <w>56</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
creates</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>679</x>
      <y>805</y>
      <w>238</w>
      <h>21</h>
    </coordinates>
    <panel_attributes>score::memory::shared::HeapMemoryResource
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>119</x>
      <y>119</y>
      <w>644</w>
      <h>154</h>
    </coordinates>
    <panel_attributes>Usage:
using ara::core::Vector&lt;T&gt; = std::vector&lt;T, std::scoped_allocator_adaptor&lt;score::memory::shared::PolymorphicOffsetAllocator&lt;T&gt; &gt;
auto top_level_memory_ressource = score::memory::shared::SharedMemoryFactory("/my_shm_name");
auto sub_memory_resource_event1 = top_level_memory_ressource.createSubResource(10000, 20000);

ara::core::Vector&lt;std::uint8_t&gt; myVector(sub_memory_resource_event1.getProxy()());

myVector.push_back(42u); // Will land on shared memory

ara::core::Vector&lt;std::uint8_t&gt; onHeap();
onHeap.push_back(42u); // Will land on heap
bg=yellow
transparency=80</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLUseCase</id>
    <coordinates>
      <x>658</x>
      <y>1008</y>
      <w>84</w>
      <h>28</h>
    </coordinates>
    <panel_attributes>lt=.
osabstraction
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>490</x>
      <y>952</y>
      <w>182</w>
      <h>84</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
manage
shared memory</panel_attributes>
    <additional_attributes>240.0;100.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>714</x>
      <y>280</y>
      <w>525</w>
      <h>175</h>
    </coordinates>
    <panel_attributes>score::memory::shared::MemoryResourceProxy
--
- memory_identifier_: std::unit64_t
--
+ MemoryResourceProxy(const std::uint64_t&amp; memoryId)
+ allocate(std::size_t n ): void*
+ deallocate(void* p, std::size_t n ): void
--
Notes:
MemoryResourceProxy is not movable or copyable.
Only does the dispatching to right MemoryResource via MemoryResourceRegistry.
Dispatching is needed as we can't put instances of real memory resources into shared memory as
they have vtables.
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>140</x>
      <y>476</y>
      <w>476</w>
      <h>147</h>
    </coordinates>
    <panel_attributes>score::memory::shared::MemoryResourceRegistry
--
- MemoryResourceRegistry()
+ getInstance(): MemoryResourceRegistry&amp;
+ at(std::unit64_t): ManagedMemoryResource*
+ insert_resource(std::pair&lt;std::unit64_t, ManagedMemoryResource*&gt;): void
+ remove_resource(std::uint64_t identifier): void
+ get_bounds_for(void*): std::pair&lt;void*, void*&gt;
+ get_bounds_for(uint64 identifier): std::pair&lt;void*, void*&gt;
--
Notes:
Not copyable, not movable
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>609</x>
      <y>336</y>
      <w>119</w>
      <h>168</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
lookup dispatch
target</panel_attributes>
    <additional_attributes>10.0;220.0;30.0;220.0;30.0;10.0;150.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>889</x>
      <y>448</y>
      <w>105</w>
      <h>84</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
allocates memory
using</panel_attributes>
    <additional_attributes>10.0;100.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>581</x>
      <y>448</y>
      <w>189</w>
      <h>259</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
dispatch
allocate
deallocate</panel_attributes>
    <additional_attributes>10.0;350.0;80.0;350.0;80.0;50.0;250.0;50.0;250.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>273</x>
      <y>616</y>
      <w>49</w>
      <h>49</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
holds</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;50.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>119</x>
      <y>651</y>
      <w>469</w>
      <h>119</h>
    </coordinates>
    <panel_attributes>score::memory::shared::ManagedMemoryResource
--
- subresources: std::map&lt;std::uint64_t, SubResource&gt;
--
/+ getMemoryResourceProxy(): MemoryResourceProxy*/
/+ construct&lt;T*&gt;(args....): T*/
/+ destruct&lt;T&gt;(T*): void/
/+ getBaseAddress() = 0: void*/
/+ getUsableBaseAddress() = 0: void*/
/+ getEndAddress() = 0: void*/</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>126</x>
      <y>462</y>
      <w>21</w>
      <h>203</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;270.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>875</x>
      <y>700</y>
      <w>231</w>
      <h>77</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
constructs and
returns</panel_attributes>
    <additional_attributes>310.0;80.0;10.0;80.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>511</x>
      <y>833</y>
      <w>574</w>
      <h>105</h>
    </coordinates>
    <panel_attributes>score::memory::shared::SubResource
--
- parent: ManagedMemoryResource&amp;
--
+ SubResource(ManagedMemoryResource&amp; parent, std::size_t initialSize, void* memory_start, std::size_t maxSize)
--
Notes:
Not copyable and not public constructable
only parent resource can create.
This entity/class is used to create multi levels of memory resources.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>336</x>
      <y>763</y>
      <w>476</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;30.0;660.0;30.0;660.0;60.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>336</x>
      <y>777</y>
      <w>287</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;390.0;10.0;390.0;80.0</additional_attributes>
  </element>
</diagram>
